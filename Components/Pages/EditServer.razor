@page "/servers/{id:int}"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IServersEFCoreRepository ServerEFCoreRepository
<h3>EditServer</h3>

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" ConfirmExternalNavigation="true"></NavigationLock>

<br />
<br />

@if (server != null)
{

    <EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">

        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <InputNumber @bind-Value="server.ServerId" hidden> </InputNumber>

        @*  <div class="row mb-3 input-width">
    <div class="col-2">
    <label class="col-form-label">Name</label>
    </div>
    <div class="col-6">
    <InputText @bind-Value="server.Name" class="form-control"></InputText>
    </div>
    <div class="col">
    <ValidationMessage For="()=>server.Name"></ValidationMessage>
    </div>
    </div> *@

        <FieldComponent Label="Name">

            <Control>
                <InputText @bind-Value="server.Name" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="()=>server.Name"></ValidationMessage>
            </ValidationControl>

        </FieldComponent>


        <div class="row mb-3">
            <div class="col-2">
                <label class="col-form-label">City</label>
            </div>
            <div class="col-6">
                <InputText @bind-Value="server.City" class="form-control"></InputText>
            </div>
        </div><div class="row  mb-3">
            <div class="col-2">
                <label class="col-form-label">Online</label>
            </div>
            <div class="col-6">
                <InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
            </div>
        </div>

        <br />

        <button class="btn btn-primary" type="submit">Update</button>
        <a href="/servers" class="btn btn-primary ">Close</a>

    </EditForm>
}


@code {

    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm(FormName = "formServer")]
    private Server? server { get; set; }

    protected override void OnParametersSet()
    {
        server ??= ServerEFCoreRepository.GetServerById(this.Id);
    }


    private void Submit()
    {
        if (server != null)
        {
            ServerEFCoreRepository.UpdateServer(server.ServerId, server);
        }
        NavigationManager.NavigateTo($"/servers/back_from/{this.server?.City}");
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to leave this page ?");

        if (!isConfirmed)
        {
            context.PreventNavigation();
        }
    }
}
