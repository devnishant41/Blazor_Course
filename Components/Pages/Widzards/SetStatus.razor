@page "/serverstatus"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using App_01_ServerManagement.StateStore
@inject ContainerStorage containerStorage

<h3>Server Status</h3>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}
@if (server is not null)
{
    <FieldComponent Label="Server Status">
        <Control>
            @if (server.IsOnline)
            {
                <input type="checkbox" @bind-value="server.IsOnline" checked class="form-check-input " />
            }
            else
            {
                <input type="checkbox" @bind-value="server.IsOnline" class="form-check-input " />
            }
        </Control>
    </FieldComponent>
}

<br />

<button type="button" class="btn btn-primary" @onclick="Save">Next</button>



@code {

    private string? errorMessage;

    private Server? server;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            this.server = this.containerStorage.GetServer();
            StateHasChanged();
        }
    }

    private void Save()
    {
        if (server is not null)
        {
            containerStorage.SetServer(null);
            ServerRepository.AddServer(server);
            NavigationManager.NavigateTo($"/servers/back_from/{this.server?.City}");
        }
    }
}
@* @page "/serverstatus"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using App_01_ServerManagement.StateStore
@inject SessionStorage sessionStorage

<h3>Server Status</h3>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}
@if (server is not null)
{
    <FieldComponent Label="Server Status">
        <Control>
            @if (server.IsOnline)
            {
                <input type="checkbox" @bind-value="server.IsOnline" checked class="form-check-input " />
            }
            else
            {
                <input type="checkbox" @bind-value="server.IsOnline" class="form-check-input " />
            }
        </Control>
    </FieldComponent>
}

<br />

<button type="button" class="btn btn-primary" @onclick="Save">Next</button>



@code {

    private string? errorMessage;

    private Server? server;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.server = await this.sessionStorage.GetServerAsync();
            StateHasChanged();
        }
    }

    private async Task Save()
    {
        if (server is not null)
        {
            await sessionStorage.SetServerAsync(null);
            ServerRepository.AddServer(server);
            NavigationManager.NavigateTo($"/servers/back_from/{this.server?.City}");
        }
    }
}
 *@