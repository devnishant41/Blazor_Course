@inject NavigationManager NavigationManager


@* @if (this.servers != null && this.servers.Count > 0)
{

    <ul>
        <Virtualize Items="this.servers" Context="server">
            <ServerComponent Server="server"></ServerComponent>
        </Virtualize>

    </ul>
}
 *@
@* <ul class="list-unstyled">
    <RepeaterComponent Items="this.servers">
        <Row Context="server">
            <ServerComponent Server="server"></ServerComponent>
        </Row>
    </RepeaterComponent>
</ul>

 *@
<table class="table table-striped">
    <RepeaterComponent Items="servers">
        <Header>
        <thead>
            <tr>
                <th>Name</th>
                <th>City</th>
                <th>Status</th>
                <th>People Online</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        </Header>
        <Row Context="server">
            <ServerComponent Server="server"></ServerComponent>
        </Row>

    </RepeaterComponent>
</table>

<br/>
<button type="button" class="btn btn-primary" onclick="@(()=>{})" > Refresh</button>)

@AnotherParam
@code {
    [Parameter]
    public int AnotherParam { get; set; }

    [Parameter]
    public string? CityName { get; set; }

    [Parameter]
    public string SearchFilter { get; set; } = "";

    private List<Server>? servers;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>("CityName", out var cityName))
        {
            if (cityName != cityName)
            {
                base.SetParametersAsync(parameters);
            }
        }

        if (parameters.TryGetValue<string>("SearchFilter", out var searchFilter))
        {
            if (searchFilter != SearchFilter)
            {
                base.SetParametersAsync(parameters);
            }
        }

        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        if (string.IsNullOrWhiteSpace(this.SearchFilter))
        {
            Console.WriteLine("api is called ");
            servers = ServerRepository.GetServerByCity(CityName ?? "London");

        }
        else
        {
            servers = ServerRepository.SearchServers(this.SearchFilter);
        }

    }

    protected override bool ShouldRender()
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"Server Component {nameof(ShouldRender)}  {guid}");
        return base.ShouldRender();
    }

  
    protected override void OnInitialized()
    {
        base.OnInitialized();
        var guid = Guid.NewGuid();
        Console.WriteLine($"Server Component {nameof(OnInitialized)}  {guid}");
    }


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        var guid = Guid.NewGuid();
        Console.WriteLine($"Server Component {nameof(OnAfterRender)}  {guid}");
    }

    public void Dispose()
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"Server Component {nameof(Dispose)}  {guid}");
    }
}
